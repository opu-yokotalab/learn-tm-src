<?xml version="1.0" encoding="UTF-8" ?>
<xtdl>
	<section id="sec1" title="構造体">
		<explanation id="sec1.1" title="構造体とは">
			<p>
				構造体(structure) とは、複数の変数をひとまとまりにしたものである。構造体を構成する変数のことをメンバー(member) という。1 つの構造体に同じ名前のメンバーを含めることはできない。<br />
例えば、平面座標上の点を表す構造体の宣言は次のようになる。
			</p>
			
				<pre class="prettyprint">struct point {
  int x ;
  int y ;
};</pre>
			
			<p>
				メンバーを宣言する順番に制限はない。この例で、変数y をx より先に宣言しても、プログラム上での扱いは変わらない。<br />
				メンバーの型には制限はない。つまり、いろいろな型のメンバーが1 つの構造体に含まれていてもよい。後述するように、ポインタ型の変数をメンバーにしてもよい。<br />
				tgif などのドローソフトには、いくつかの図形をグループ化する機能がある。グループ化された図形たちは、あたかも1 つの図形であるかのように拡大縮小したり、コピー&amp;ペーストしたりすることができる。構造体は、この「グループ化」の機能に近い。
			</p>
		</explanation>
		<exercise id="kadai1" title="課題1">
			<p>個人データを表す構造体を作成せよ。個人データの項目は配布された課題にある通りとする。</p>
		</exercise>
		<explanation id="sec1.2" title="型としての構造体">
			<p>
				いったん構造体を定義すると、以降、その構造体は型として扱える。つまりint やchar などと同じように扱うことができる。例えば、先の構造体point を宣言すると、次のように、point 型の変数を宣言したり利用したりできる。
			</p>
			<pre class="prettyprint">/* point型の変数ptの宣言 */
struct point pt ;

/* point型の変数maxptの宣言、および初期化。
   pointの宣言に従って、値とメンバが対応される。この例では、
   x と320が、yと200がそれぞれ対応される
*/

struct point maxpt = {320 , 200};
/* 構造体の宣言と変数宣言を一緒にしてもよい */
struct float_point{
  float x;
	float y;
} float_pt;
			</pre>
			<div style="text-align:center;">
				<img src="/images/c-kunishi/fig1_1.jpg" alt="構造体pointのメモリ上の配置" /><br />
				<strong>図1.1　構造体pointのメモリ上の配置</strong>
			</div>
			<p>
				構造体と変数の関係を述べる前に、変数と型の正体について述べておく必要があるだろう。<br />
				変数(variable) とはいわば「入れ物」であり、メモリ上に確保された一定サイズの領域である。その中に入れる(格納する) ことのできる値(value) の制限が型(type) である。例えばint i; と宣言すると、32 ビット分のメモリ領域が自動的に確保され、そこにi という名前がつけられる。これが変数i の正体である。そして、変数i にはint型の値、すなわち整数しか格納できない。<br />
				では、構造体はどのようなものとしてメモリ上に配置されているのだろうか。実は、メンバーの領域が連続して配置されたようなメモリ領域になっている。ただし、構造体独自の領域がある場合もある。<br />
				例えば、変数pt は図1.1 のようにメモリ上に配置される。point 型の変数pt を宣言すると、point 型に相当するメモリ領域(この場合は32 ビット+32 ビット=64 ビット) が自動的に確保され、そこにpt という名前がつけられる。そしてこの領域には、point 型の値しか格納できない。point 型の値とは、具体的には2 つの整数の組であり、例えば(320, 200) のようなものである。
			</p>
		</explanation>
		<explanation id="sec1.3" title="メンバーの値を参照するには">
			<p>
				構造体のメンバーの値を参照するにはどうしたらよいのだろうか。例えば、平面上の点のx 座標の値を得るにはどうしたらよいのだろうか。<br />
それには構造体メンバー演算子(structure member operator) “ . ” を用いる。これは二項演算子であり、各演算数は次の通りでなければならない。
			</p>
			<ul>
				<li>第1 演算数は構造体型の変数や式</li>
				<li>第2 演算数はメンバー名</li>
			</ul>
			
				<pre class="prettyprint">struct point maxpt = {320 , 200};
/* メンバーxの値の参照 */
  printf("%d\n",maxpt.x);

/* メンバーyへの代入 */
  maxpt.y = 240</pre>
			
		</explanation>

		<explanation id="sec1.4" title="構造体の配列">
			<p>
				構造体は型として扱えるのだから、もちろん構造体の配列も許される。
			</p>
			
				<pre class="prettyprint">struct point pts[100];
/* 要素数3の配列pts1の宣言と初期化 */
struct point pts1 [] =
  {{320 , 200} ,
  {150 , 500} ,
  {0 , 0 }};

/* pts1の各要素はpoint型の値 */
pts1[1].y = 240;</pre>
			
		</explanation>
		<section id="sec1.5" title="構造体へのポインタ参照">
			<explanation id="sec1.5.1" title="ポインタについてのまとめ直し">
				<p>
					構造体は型として扱えるのだから、もちろん構造体へのポインタ参照も許される。この話に入る前に、ポインタについて簡単にまとめ直しておく。<br />
先に述べたように、変数の正体はメモリ領域である。ということは、変数と、(変数の正体である) メモリ領域の先頭番地は1 対1 に対応するはずである。<br />
そこで、C では以下の2 つの単項演算子を用意した。
				</p>
				<ul>
					<li>アドレス演算子(address operator) &amp;：変数名からメモリ領域の先頭番地を得る演算子</li>
					<li>間接演算子(indirection operator) *：メモリ領域の先頭番地から変数の値を得る演算子</li>
				</ul>
				<p>
					また、型X に対して、X 型のメモリ領域の先頭番地を表す型X*を用意した。例えばint *pi; と書くと、変数pi にはint 型のメモリ領域の先頭番地しか格納できない(図1.2)。
				</p>
				<div style="text-align:center">
					<img src="/images/c-kunishi/fig1_2.jpg" alt="int *pi;" /><br />
					<strong>図1.2　int *pi;</strong>
				</div>
			</explanation>
			<explanation id="sec1.5.2" title="構造体に対するポインタ">
				<p>
					前節のポインタに関する説明は、構造体にもそのままあてはまる。以下の2 つの変数宣言はまったく異なることに注意せよ。</p>
					<ul>
						<li>struct point pt; … 変数pt はpoint 型の値を格納できるだけの領域(64 ビット) を持つ。格納できる値は(320, 200) のような2 つの整数の組である。</li>
						<li>struct point *p; … 変数p は番地を格納できる領域(現在は多くの場合32 ビット) を持つ。格納できる値はpoint 型の値の格納領域の先頭番地である。</li>
					</ul>
					<p>
						これまで呪文のように書いてきた以下のプログラムコードも、これまでの説明を踏まえると、体系的に理解することができる。</p>
						<ul>
							<li>struct point *p = (struct point *)NULL;<br />
							C では、NULL は整数0 の別名である。すると、このコードの意味は「番地を格納する32 ビットのメモリ領域p を確保し、そこに0 を代入する」となる。ただし、0 は通常int 型であり、変数p の型とは異なる。そこで、(struct point *)NULL というように、明示的に0 の型を変換(キャスト, cast) してから代入を行っている。</li>
							<li>struct point *p = (struct point *)malloc(sizeof(struct point));<br />
							変数p の領域を確保するところまでは上の例と同じ。<br />
							malloc() 関数は次のような動きをする。<br />
							<ul>
								<li>プログラム実行時に、(引数で与えられた整数値) バイトの領域を確保</li>
								<li>確保した領域の先頭番地を、void *型、もしくはint 型の値として返す</li>
								<li>確保した領域の初期値は未定義(何が入っているか分からない)</li>
							</ul>
							sizeof は(なんと!) 単項演算子で、しかも型名を演算数にとる。結果は、その型の値を格納するのに必要なバイト数である。したがってsizeof(struct point) = 8(8 バイト=64 ビット) である。<br />
							まとめると、malloc() によりsizeof(struct point) バイトの領域を動的に確保し、その先頭番地を明示的にstruct point *型に変換してからp に代入していることになる(図1.3)。ただしmalloc() で確保した領域の初期値は分からないので、プログラマが自分で初期化しておかなければならない。
							</li>
						</ul>
			</explanation>
			<explanation id="sec1.5.3" title="ポインタ参照した構造体のメンバー">
				<p>
					図1.3 において、動的に確保した構造体のメンバーx の値を読み出すにはどうしたらよいだろうか。<br />
					8236 番地から始まる構造体は、*p で得られる。したがって、この構造体のメンバーx は(*p).x で得られる。ただし、二項演算子. は単項演算子*よりも優先順位が高いので、カッコが必要になる。</p>
					<div style="text-align:center">
						<img src="/images/c-kunishi/fig1_3.jpg" alt="領域の動的確保" /><br />
						<strong>図1.3　領域の動的確保</strong>
					</div>
					<div style="text-align:center">
						<img src="/images/c-kunishi/fig1_4.jpg" alt="point2型の構造体" /><br />
						<strong>図1.4　point2型の構造体</strong>
					</div>
					<p>
					C のプログラムでは、この種のコードが頻繁に出てくるので、カッコが多くなると煩わしい。そこで、C には、(*p).x の略記法が用意してある。p -> x である。この2 つの式はまったく等価である。<br />
なお、演算子->は左結合であることに注意されたい。すなわち、a -> b -> c は(a -> b) -> c の意味になる。
				</p>
			</explanation>
		</section>
		<explanation id="sec1.6" title="ポインタ型を含む構造体">
			<p>
				ここまでの説明で述べた通り、ポインタ変数とは単に「番地(という整数値) しか格納できない変数」である。したがって、ポインタ変数をメンバーとするような構造体も許されるはずである。例として、次のような構造体を考える。
			</p>
			
				<pre class="prettyprint">struct point2 {
  int x ;
  int y ;
  struct point2 . next ;
};
struct point2 .pp ;</pre>
			
			<p>
				これは図1.4 のような構造体を表している。メンバーnext が、別のpoint2 型の構造体を指し示すポインタになっている。左側の構造体の先頭番地が変数pp に格納されているとすると、右側の構造体の先頭番地はp -> next である。したがって、右側の構造体のメンバーx の値を得るには(pp -> next) -> x、もしくはpp -> next -> x とすればよい。
			</p>
		</explanation>
		<section id="sec1.7" title="演習問題：文字列操作">
			<exercise id="kadai2" title="演習問題：文字列操作関数の調査">
				<p>
					C 言語には、文字列を操作するライブラリ関数としてstrcpy, strcmp, strcat などがある。これらの関数について、以下の項目をマニュアル等を用いて調べよ。
				</p>
				<ul>
					<li>引数の数・型、返り値の型</li>
					<li>関数の動作の概要、引数や返り値の意味</li>
				</ul>
			</exercise>
			<exercise id="kadai3" title="演習問題：文字列操作関数の実装">
				<p>
					strcpy, strcmp, strcat と全く同じ振舞いをする関数を実装し、動作を確認せよ。関数名はそれぞれmy strcpy, my strcmp, my strcat とせよ。<br />
					ここでいう「振舞い」とは、関数の動作だけではなく、引数の数・型、返り値の型、それらの意味なども含まれる。つまり、strcpy の代わりにmy strcpy を用いても全く同じ動作をしなければならない。<br />
					動作の確認には、my strcpy, my strcmp, my strcat を使用してmain() を実装し、その動作が予想通りになっているかどうか調べれば良い。
				</p>
			</exercise>
		</section>
		<section id="sec1.8" title="演習問題：住所録の作成">
			<explanation id="sec1.8.1" title="演習問題：住所録の仕様">
				<p>
					作成する電話番号簿の仕様は次の通りとする．
				</p>
				<ul>
					<li>個人データは，以下の3 個の項目から構成されることとする．
					<ol>
						<li>氏名（アルファベット）：char[256]（文字列）</li>
						<li>電話番号：char[16]（文字列）</li>
						<li>学籍番号：int</li>
					</ol>
					</li>
					<li>最大5 名分のデータを管理できること．</li>
					<li>新規追加が可能であること．</li>
					<li>指定されたデータの削除が可能であること．削除されたデータ項目は次の仕様に基づいて「登録がない」状態とすること．</li>
					<li>登録がないデータ項目は，氏名および電話番号についてはヌル文字列，学籍番号については0 が格納されていることとする．</li>
					<li>上記の仕様を用いて，一度削除されたデータ項目は以降の新規追加処理で再利用可能であること．</li>
				</ul>
			</explanation>
			<section id="sec1.8.2" title="課題：構造体を用いない実装">
				<exercise id="kadai4" title="課題4">
					<p>前節で述べた個人データを管理する住所録を、名前、電話番号、学籍番号を表す3 つの配列name, phone,number を用いて実装せよ。</p>
					<ol>
						<li>(データの新規追加) 引数を順に名前、電話番号、学籍番号とするようなデータ項目を住所録に追加する関数void add(char *, char *, int);</li>
						<li>(データ項目の削除) 引数で指定されたデータ項目と合致する個人データを住所録から削除する関数
						<pre class="prettyprint">void delByName(char *);
void delByPhone(char *);
void delByNumber(int);</pre>
						例えばdelByName() は、引数で指定された文字列を名前とするような個人データを住所録から削除する。delByPhone(), delByNumber() も同様である。</li>
						<li>(データの検索) 引数で指定されたデータ項目を住所録から検索する関数
						<pre class="prettyprint">void findByName(char *);
void findByPhone(char *);
void findByNumber(int);</pre>
例えばfindByName() は、引数で指定された文字列を名前とするようなデータ項目を住所録から検索する。findByPhone(), findByNumber() も同様である。<br />
						これらの関数は、合致するすべての個人データを表示するものとする。</li>
						<li>(データの表示) 住所録に登録されている個人データをすべて表示する関数
						<pre class="prettyprint">void printAll();</pre>
						未使用の領域も出力すること。</li>
					</ol>
					<p>を作成せよ。</p>
					<ul>
						<li>引数の意味に充分注意すること。例年、引数の意味を誤解して実装を行う学生が少なからず見受けられる。</li>
						<li>文字列の一致判定にはstrcmp あるいはstrcasecmp を用いるとよい．</li>
						<li>データを格納する配列name，phone，number はグローバル変数（大域変数）で確保してよい．</li>
					</ul>
				</exercise>
				<exercise id="kadai5" title="課題5">
					<p>課題4 で作成した関数を用いて住所録データを操作するmain() 関数を作成せよ。その実行結果も示せ。</p>
					<ul>
						<li>今回の実験の主眼はmain() ではなく、課題4(および課題7) である。したがってデータの入出力に凝る必要は必ずしもない。例年、ユーザとの対話的入出力を実装してくる学生が多いが、そこまでは要求しない。</li>
						<li>ただし、課題4 で実装した関数が正しく動作することを確認するように実装を行うこと。すなわち、最低限、main() の中ですべての関数を使うようにしなければならない。</li>
					</ul>
				</exercise>
			</section>
			<section id="sec1.8.3" title="課題：構造体を用いた実装">
				<exercise id="kadai6" title="課題6">
					<p>仕様で述べた個人データを表す構造体の宣言を書け。構造体のメンバー名は自由に決めてよい。</p>
				</exercise>
				<exercise id="kadai7" title="課題7">
					<p>課題4 で作成したものと同一（機能だけではなく引数の個数，型も同一）の関数群を構造体の配列を用いて実装せよ．ここで用いる構造体は，課題6 で作成した構造体を用いること．なお，データを格納する構造体の配列はグローバル変数（大域変数）で確保してよい．</p>
				</exercise>
				<exercise id="kadai8" title="課題8">
					<p>課題7 で作成した関数を用いて住所録データを操作するmain() 関数を作成せよ。その実行結果も示せ。</p>
				</exercise>
			</section>
		</section>
	</section>
</xtdl>
