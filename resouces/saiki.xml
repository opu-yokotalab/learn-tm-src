<?xml version="1.0" encoding="utf-8"?>
<xtdl>
  <section title="再帰呼び出し" id="saiki1">
    <section title="再帰呼び出し" id="saiki1.1">
      <explanation title="再帰呼び出しの概要" id="saiki1.1.1">
				<p>階乗 n! は次のような性質を満たす．</p>
				<blockquote><p>n! = n・(n-1)! , 0! = 1</p></blockquote>
				<p>ある関数のなかから, 自分自身を呼び出すことを<strong>再帰呼び出し (recursive call)</strong>という。<br />
				手続きや関数といった概念を持つプログラミング言語では、ある手続き中で再びその手続き自身を呼び出す事を認める場合が多い。階乗計算やフィボナッチ数列のように、本来再帰的な構造を持つアルゴリズム（再帰的アルゴリズム）を記述するのに適している。<br />
				再帰のことを帰納という場合もある。</p>
			</explanation>
			<example title="階乗計算の例" id="saiki1.1.2">
				<p>再帰プログラムの例として，階乗関数がある．階乗関数 ｎ!は</p>
				<blockquote style="font-weight:bold;">
					<p>n!＝1・2・3.....(n-1)・n</p>
					</blockquote><p>で定義される．このとき、</p>
					<blockquote style="font-weight:bold;">
						<p>0! = 1， <br />n &gt; 0　のとき，　n! = (n -1)!・n</p>
					</blockquote>
					<p>と考えることができる.</p>
			</example>
			<explanation title="具体的な解説" id="saiki1.1.3">
				<p>この考えをもとに３！を計算してみると，次のようになります。 </p>
			<blockquote style="font-weight:bold;"><p>3 &gt; 0 だから，　3! = 2! × 3</p></blockquote>
			<p>ここで， 2! を計算する。 </p>
			<blockquote style="font-weight:bold;"><p>2 &gt; 0 だから，2! = 1! × 2</p></blockquote>
			<p>ここで 1! を計算する。 </p>
			<blockquote style="font-weight:bold;"><p>1 &gt; 0 だから，1! = 0! × 1</p></blockquote>
			<p>ここで 0! = 1 である。これを使って，上の計算を逆にたどる。</p>
			<blockquote style="font-weight:bold;"><p>1! = 0! × 1 = 1 × 1 = 1<br />2! = 1! × 2 = 1 × 2 = 1<br />3! = 2! × 3 = 2 × 3 = 6</p></blockquote>
			<p>このようにして 3! が計算されます。 </p>
			</explanation>
      <example title="C言語による階乗計算の実装例" id="saiki1.1.4">
          <pre class="prettyprint">
/* 階乗n!を計算する */ 
int fact(int n) { 
   /* 脱出条件。0!は1である */ 
   if (n==0)  return 1; 

   /* n!は(n-1)!にnを乗じたもの。再帰呼び出し */
   else return fact(n-1)*n;  
}
					</pre>
			なお、処理を中断・終了する条件（下の例では引数 n が0である場合）が必ず一つは必要で、その部分が間違っていると無限に関数を呼び出してしまう場合がある.
			</example>
			<exercise id="saiki1.1.5-1" title="演習問題">前節で示したプログラムソースに加えて、さらに入力と出力の処理を追加してプログラムを完成させなさい。</exercise>
      <exercise title="模範解答" id="saiki1.1.5-2">以下が模範解答です。
			<pre class="prettyprint">// 階乗 n! を計算する
#include&lt;stdio.h&gt;
int fact(int);
int main(void)
{
int a,n;

// 変数入力
printf("input n:");
scanf("%d",&amp;n);

// 階乗計算
a = fact(n);

// 出力
printf("answer : %d! = %d\n",n,a);
return 0;
}
int fact(int n){
// 基底段階
if(n == 0) return 1;

// 帰納段階
if(n &gt; 0) return n * fact(n-1);
}
</pre>
<h4>実行結果</h4>
<blockquote><pre>
n として 3 を入力した場合
[******@localhost c]$ ./kaijo
input n:3
answer : 3! = 6

n として 4 を入力した場合
[******@localhost c]$ ./kaijo
input n:4
answer : 4! = 24</pre></blockquote>
			</exercise>
		</section>
		<section title="漸化式" id="saiki1.2">
			<example id="saiki1.2.1" title="漸化式の例題">漸化式<blockquote><img src="/~learn/images/zenka.png" width="179"></img></blockquote>できまる数列のn項めをもとめるプログラムを作ろう. <br />プログラムは以下のようになる. <h4>再帰を利用する実装例</h4>
<pre class="prettyprint">
/* 再帰を利用した漸化式の実装例 */
int xn2(int n){
/* 基底段階 */
if(n == 0) return 0;

/* 帰納段階 */
if(n &gt; 0) return 2*xn2(n-1)+1;
}</pre>
			<br />
			このように再帰呼び出しを利用することで ずいぶんすっきりとしたプログラムを書くことができる。
			</example>
			<exercise title="演習問題" id="saiki1.2.2-1">
				上記の例題1で示した漸化式のプログラムソースを用いて、入出力を含めたプログラムを完成させなさい。
			</exercise>
      <exercise id="saiki1.2.2-2" title="模範解答">
				以下が模範解答のプログラムリストです。
				<pre class="prettyprint">
// 漸化式 再帰呼出しを利用
#include&lt;stdio.h&gt;
int xn2(int);
int main(void){
int a,n;
printf("input n:");
scanf("%d",&amp;n);

a = xn2(n);

printf("answer: a = %d\n",a);

return 0;
}
int xn2(int n){
/* 基底段階 */
if( n==0 ) return 0;

/* 帰納段階*/
if( n&gt;0 ) return 2*xn2(n-1)+1;
}</pre>
<h4>実行結果</h4>
<blockquote>
<pre>
入力として1を与えた場合
[*******@localhost c]$ ./zenka
input n:1
answer: a = 1

入力として2を与えた場合
[*******@localhost c]$ ./zenka
input n:2
answer: a = 3

入力として3を与えた場合
[*******@localhost c]$ ./zenka
input n:3
answer: a = 7
</pre>
					</blockquote>
			</exercise>
			<example id="saiki1.2.3" title="漸化式の例題2">漸化式プログラム自体は単純であるが, 実はこのような場面で再帰をもちいるのはあまり得策ではない.
メモリや実行効率の低下があるからである.関数およびその局所変数は動的に生成, 消滅を繰り返している.<br /><br />たとえば, 前節のプログラムで xn2(4) をよぶと, xn2(3), xn2(2), xn2(1), xn2(0) がつぎつぎとよびだされ, xn2(0) の実行中には, 5 つの xn2 が実行されており, したがって局所変数 XN および 引数 N も, それぞれ 5 つ生成されている. <br />
したがって一般に, xn2(n) に対しては, 
<strong>最大 n+1 個の変数領域</strong>
が確保されることになる.<br /><br />次のようなプログラムを書けば, このようなメモリの無駄使いは生じない.<h4>再帰を利用しない実装例</h4>
<pre class="prettyprint">/* 再帰を利用しない漸化式の実装例 */
int xn2(int n){
  int i,xn = 0;

  /* for文を用いて求める */
  for(i=0;i&lt;n;i++){
    xn = 2*xn+1;
  }
  return xn;
}</pre>
			</example>
      <exercise title="演習問題" id="saiki1.2.4-1">上記の例題2で示した漸化式のプログラムソースを用いて、入出力を含めたプログラムを完成させなさい。</exercise>
      <exercise id="saiki1.2.4-2" title="模範解答">以下が模範解答のプログラムリストです。
			<pre class="prettyprint">// 漸化式 再帰呼出しを利用しない場合
#include&lt;stdio.h&gt;
int xn2(int);
int main(void){
  int a,n;
  printf("input n:");
  scanf("%d",&amp;n);

  a = xn2(n);

  printf("answer: a = %d\n",a);

  return 0;
}
int xn2(int n){
  int i,xn = 0;

  /* for文を用いて求める */
  for(i=0;i&lt;n;i++){
    xn = 2*xn+1;
  }
  return xn;
}</pre>
<h4>実行結果</h4>
<blockquote><pre>入力として1を与えた場合
[*******@localhost c]$ ./zenka
input n:1
answer: a = 1

入力として2を与えた場合
[*******@localhost c]$ ./zenka
input n:2
answer: a = 3

入力として3を与えた場合
[*******@localhost c]$ ./zenka
input n:3
answer: a = 7
</pre></blockquote>
			</exercise>
		</section>
		<section id="saiki1.3" title="フィボナッチ数列">
			<explanation title="フィボナッチ数列" id="saiki1.3.1">
				フィボナッチの数列 F(n) は次のように定義されている．
<blockquote style="font-weight:bold;">
<pre>F(1)=1， F(2)=1
n&gt;2 のとき F(n)=F(n-1)+F(n-2)</pre>
</blockquote>
これによると例えば，F(3)=2, F(4)=3, F(5)=5, F(6)=8, ... となる．このフィボナッチ数はかなり急速に大きくなる数で，例えば F(50)ならば、
<blockquote style="font-weight:bold;">
F(50)=12586269025
</blockquote>
となる．
			　</explanation>
      <example title="C言語による実装例" id="saiki1.3.2">
        <h4>再帰を利用しない場合</h4>
				<pre class="prettyprint">int Fibonacci(int n) { 
  int a=1 , b=1 , c;
  int i;
  for(i=3;i＜=n;i++){
    c=a+b;
    b=a;
    a=c;
  }
  return a;
}</pre>
			</example>
			<exercise title="演習問題" id="saiki1.3.4-1">上記の例で示したサンプルプログラムを用いて、フィボナッチ数を求めるプログラムを入出力を含めた形で完成させなさい。</exercise>
      <exercise title="演習問題" id="saiki1.3.4-2">再帰を利用する場合のフィボナッチ数を求めるプログラムを入出力を含めた形で完成させなさい。</exercise>
      <exercise id="saiki1.3.4-3" title="模範解答">以下が模範解答のプログラムリストです。
			<pre class="prettyprint">// Fibonacci 再帰呼出しを利用する場合
#include&lt;stdio.h&gt;
int fibonacci(int);
int main(void){
  int a,n;
  printf("input n:");
  scanf("%d",&amp;n);

  a = fibonacci(n);

  printf("answer: a = %d\n",a);
}
int fibonacci(int n){
  if(n == 0) return 0;
  else if (n == 1) return 1;
  else return fibonacci(n-1)+fibonacci(n-2);
}</pre>
<h4>実行結果</h4>
<blockquote><pre>入力として4を与える
[*******@localhost c]$ ./fibo
input n:4
answer: a = 3

入力として10を与える
[*******@localhost c]$ ./fibo
input n:10
answer: a = 55</pre></blockquote></exercise>
      <explanation title="時間計算量の比較" id="saiki1.3.5">
ここで二つのプログラムの計算量を考えて見ましょう。<br /><br />フィボナッチ数列の計算量をFB(n)とします。<br />再帰をつかったプログラムでは、FB(n)=FB(n-1)+FB(n-2)となります。<br />詳細は省きますが、これをO(n)であらわすと<blockquote><pre>FB(n)=O(exp^n)</pre></blockquote>となります。<br />また、再帰を使わないプログラムでは3からn回までループが一つだけなので、<blockquote><pre>FB(n)=n-3=O(n)</pre></blockquote>となります。<br /><br />
このことからフィボナッチ数列では再帰を使わないほうが計算量が少なく、高速なプログラムといえます。
　　　</explanation>
    </section>
  </section>
  <section title="いろいろな応用" id="saiki2">
    <section id="quick" title="応用編：クイックソート">
      <explanation title="応用編：クイックソート" id="quick1">クイックソートは、その名前が示すように非常に高速なソートアルゴリズムです。処理速度が求められる場面では必ず候補に挙がります。しかし、必ずしも常に高速であるとは限らず、ある条件下ではバブルソート並の速度にまで落ち込む可能性があります。<br></br><br />クイックソートの考え方は、全体の中から基準となる要素を１つ選び（この要素を枢軸 やピボットと呼びます）、これより小さい要素と大きい要素とに分割します。分割された２つの要素群については、更にその中で分割を行います。これを繰り返していくと、最終的には要素が１つ１つばらばらな状態にまで分割されます。この状態になったら、今度はそれを一気に結合します。分割処理は、要素の大小関係によって行われているので、最終結果を結合すれば既にソート結果が出来上がっているということです。<br></br>アルゴリズムの一例を示します。<blockquote style="width:600px;"><ol type="1"><li>ピボットとして一つ選びそれをPとする。</li><li>左から順に値を調べ、P以上のものを見つけたらその位置をiとする。</li><li>右から順に値を調べ、P以下のものを見つけたらその位置をjとする。</li><li>iがjより左にあるのならばその二つの位置を入れ替え、2に戻る。ただし、次の2での探索はiの一つ右、次の3での探索はjの一つ左から行う。</li><li>2に戻らなかった場合、iの左側を境界に分割を行って2つの領域に分け、そのそれぞれに対して再帰的に1からの手順を行う。要素数が1以下の領域ができた場合、その領域は確定とする。</li></ol></blockquote><br></br>分かりにくいかも知れませんが、重要なのは「分割」していく処理を「再帰」するという点だけです。</explanation>
      <example title="クイックソートの動作イメージ" id="quick2">ここではクイックソートの動作イメージを掴むためのJavaアプレットを紹介します。<br />(引用元：<a href="http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/index.html">いろいろなソートアルゴリズム</a>)<br /><applet codebase="http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/java/" code="SortApplet.class" width="500" height="300"><param name="sort" value="Quick" /></applet><h4>操作方法</h4><img src="/~learn/images/applet_explanation.jpg" /></example>
      <example title="クイックソートのC言語による実装例" id="quick3">ここでは再帰呼び出しを用いない実装例を紹介します。
<pre class="prettyprint">#include &lt;stdio.h&gt;

#define ARRAY_SIZE (10)
#define STACK_SIZE (32)

/* プロトタイプ宣言 */
void quick_sort(int array[], int begin, int end);
void print_array(int array[], int size);

int main(void)
{
  int data[ARRAY_SIZE] = { 30, 20, 60, 50, 90, 0, 40, 10, 70, 80 };
  
  print_array( data, ARRAY_SIZE );    /* ソート前の配列を出力 */
  quick_sort( data, 0, ARRAY_SIZE );  /* クイックソート実行 */
  print_array( data, ARRAY_SIZE );    /* ソート前の配列を出力 */
  
  return 0;
}

/*
  昇順になるようにクイックソートを行う。
  引数　array：ソート対象の配列。
  　　　begin：ソート範囲の先頭の添字。
      end：ソート範囲の末尾の添字。
*/
void quick_sort(int array[], int begin, int end)
{
  int i, j;
  int work;
  int pivot;   /* 枢軸 */
  int left_stack[STACK_SIZE], right_stack[STACK_SIZE];  /* スタック */
  int sp;      /* スタックポインタ */
  int left, right;
  
  /* スタックを初期化する */
  left_stack[0] = 0;
  right_stack[0] = end - 1;
  sp = 1;
  
  /* スタックが空になるまで繰り返す */
  while( sp &gt; 0 )
  {
    /* ソートする範囲をスタックからポップ */
    --sp;
    left = left_stack[sp];
    right = right_stack[sp];
    
    /* ソート範囲に含まれる要素数が１つだけなら、何もする必要はない */
    if( left &lt; right )
    {
      pivot = array[ ( left + right ) / 2 ];  /* 範囲の中央にある要素を枢軸とする */
      i = left;
      j = right;
      
      while( 1 )
      {
        while( array[i] &lt; pivot ){ ++i; }  /* 枢軸以上の値が見つかるまで右方向へ進めていく */
        while( array[j] &gt; pivot ){ --j; }  /* 枢軸以下の値が見つかるまで左方向へ進めていく */
        if( i &gt;= j ){ break; }  /* 左右から進めてきたiとjがぶつかったらループを終える */
        
        /* 要素を交換する */
        work = array[i];
        array[i] = array[j];
        array[j] = work;
      }
            
      /* 左右の部分のうち、小さい方の範囲を先に処理するようにする */
      if( i - left &lt; right - i )
      {
        /* 左部分の方が小さいので、先に処理できるように、スタックには右部分から積む */
        left_stack[sp]    = i + 1;
        right_stack[sp++] = right;
        left_stack[sp]    = left;
        right_stack[sp++] = i - 1;
      }
      else
      {
        /* 右部分の方が小さいので、先に処理できるように、スタックには左部分から積む */
        left_stack[sp]    = left;
        right_stack[sp++] = i - 1;
        left_stack[sp]    = i + 1;
        right_stack[sp++] = right;
      }
    }
  }
}

/*
  配列の要素を出力。
  引数　array：出力する配列。
  　　　size：配列の要素数。
*/
void print_array(int array[], int size)
{
  int i;
  int *p = &amp;array[0];
  
  for( i = 0; i &lt; size; ++i )
  {
    printf( "%d ", *p );
    ++p;
  }
  printf( "\n\n" );
}</pre>
			</example>
			<exercise id="quick_exercise1" title="演習問題1">上記の例題で示したサンプルプログラムを各々の環境で実行し、動作を確認しなさい。</exercise>
      <exercise id="quick_exercise2-1" title="演習問題2">再帰呼び出しを用いたクイックソートのプログラムをC言語で実装しなさい。</exercise>
      <exercise id="quick_exercise2-2" title="模範解答">以下に、再帰呼び出しを用いたクイックソートの実装例を示します。
<pre class="prettyprint">#include &lt;stdio.h&gt;

#define ARRAY_SIZE (10)

/* プロトタイプ宣言 */
void quick_sort(int array[], int begin, int end);
void print_array(int array[], int size);

int main(void)
{
 int data[ARRAY_SIZE] = { 30, 20, 60, 50, 90, 0, 40, 10, 70, 80 };
 
 print_array( data, ARRAY_SIZE );      /* ソート前の配列を出力 */
 quick_sort( data, 0, ARRAY_SIZE-1 );  /* クイックソート実行 */
 print_array( data, ARRAY_SIZE );      /* ソート前の配列を出力 */
 
 return 0;
}

/*
 昇順になるようにクイックソートを行う。
 引数　array：ソート対象の配列。
 　　　begin：ソート範囲の先頭の添字。
    end：ソート範囲の末尾の添字。
*/
void quick_sort(int array[], int begin, int end)
{
 int i, j;
 int pivot;   /* 枢軸 */
 int work;
  
 pivot = array[ ( begin + end ) / 2 ];  /* 範囲の中央にある要素を枢軸とする */
 i = begin;
 j = end;
 
 while( 1 )
 {
  while( array[i] &lt; pivot ){ ++i; }  /* 枢軸以上の値が見つかるまで右方向へ進めていく */
  while( array[j] &gt; pivot ){ --j; }  /* 枢軸以下の値が見つかるまで左方向へ進めていく */
  if( i &gt;= j ){ break; }  /* 左右から進めてきたiとjがぶつかったらループを終える */
  
  /* 要素を交換する */
  work = array[i];
  array[i] = array[j];
  array[j] = work;
 }
 
 /* 枢軸の左側に要素が２つ以上あれば、その部分についてクイックソートを再帰させる */
 if( begin &lt; i - 1 ){ quick_sort( array, begin, i - 1 ); }
 /* 枢軸の右側に要素が２つ以上あれば、その部分についてクイックソートを再帰させる */
 if( j + 1 &lt; end ){ quick_sort( array, j + 1, end ); }
}

/*
 配列の要素を出力。
 引数　array：出力する配列。
 　　　size：配列の要素数。
*/
void print_array(int array[], int size)
{
 int i;
 int *p = &amp;array[0];
 
 for( i = 0; i &lt; size; ++i )
 {
  printf( "%d ", *p );
  ++p;
 }
 printf( "\n\n" );
}
</pre>
			</exercise>
		</section>
    <section title="応用編：ハノイの塔" id="hanoi">
      <explanation title="応用編：ハノイの塔" id="hanoi1">
			ハノイの塔は1883年にフランスのＥ．Lucas（リュカ）が考案したゲームと言われています。<br />これは次のようなゲームです。 <br></br>
			<img src="/~learn/images/Tower_of_Hanoi.gif"></img><br />
			以下のルールに従ってすべての円盤を右端の杭に移動させられれば完成。
			<ul>
			<li>3本の杭と、中央に穴の開いた大きさの異なる複数の円盤から構成される。</li>
			<li>最初はすべての円盤が左端の杭に小さいものが上になるように順に積み重ねられている。</li>
			<li>円盤を一回に一枚ずつどれかの杭に移動させることができるが、小さな円盤の上に大きな円盤を乗せることはできない。</li>
			</ul>
			</explanation>
      <explanation id="hanoi2" title="解法アルゴリズム">3本の棒にA,B,Cの名前を付ける。最初Aにn個の円盤があり、Cにすべての円盤を移動させるとすると、次のようにする。<blockquote style="width:600px;"><ol type="1"><li>上からn-1個目までの円盤をAからBに移動する。</li><li>残った1枚をAからCに移動する。</li><li>Bにある円盤をBからCに移動する。</li></ol></blockquote>2と3のあいだでは、Bに置いてあるｎ－１個の円盤をCに移すことを考えればよい。この時点のBの状態を先のAと考え、Bを先のAと考えてやれば、上記1,2,3の手順がそのまま利用できる。上記手順を関数的に記述してみよう。<p><strong>ｎ個の円盤をＡからＣへ移す： move( n, A to C, using B )</strong></p><blockquote style="width:600px;"><ol type="1"><li>n-1 個の円盤を A から B へ移動 ： move( n-1, A to B, using C )</li><li>Aの一番下にあった（n番目の）円盤をCへ移す ： print( n を A から C へ )</li><li>n-1 個の円盤をBからCへ移動 ： move( n-1, B to C, using A )</li></ol></blockquote>このように記述してみると、手続きが再帰的になっていることが分かる。つまりこれらが再帰の一般式になっている。これに再帰の停止条件つまり、ｎが１の時の状況を考えればよい。<blockquote style="width:600px;"><ol type="1"><li>1個の円盤をAからCへ移す： move( 1, A to C, using B )</li><li>Aにある1つの円盤をCへ移す ： print( 1 を A から C へ )</li></ol></blockquote></explanation>
      <exercise id="hanoi3-1" title="演習問題">前節で示した解法アルゴリズムに従って、ハノイの塔のプログラムを完成させなさい。</exercise>
      <exercise title="模範解答" id="hanoi3-2">以下が模範解答です。
			<pre class="prettyprint">/*  ハノイの塔  */

#include &lt;stdio.h&gt;
void move(int n, char a, char b, char c);
main(){
  int n;
  printf("How many saucers do You want? ");
  scanf("%d", &amp;n);
  move(n, 'A', 'B', 'C');
}
// 再帰呼び出し関数
void move(int n, char a, char b, char c){
  if(n &gt; 1)  move(n - 1, a, c, b);
  printf("saucer %2d : %c -&gt; %c\n", n, a, c);
  if(n &gt; 1)  move(n - 1, b, a, c);
}</pre>
<h4>実行結果</h4>
<blockquote><pre>How many saucers do You want? 4
saucer  1 : A -&gt; B
saucer  2 : A -&gt; C
saucer  1 : B -&gt; C
saucer  3 : A -&gt; B
saucer  1 : C -&gt; A
saucer  2 : C -&gt; B
saucer  1 : A -&gt; B
saucer  4 : A -&gt; C
saucer  1 : B -&gt; C
saucer  2 : B -&gt; A
saucer  1 : C -&gt; A
saucer  3 : B -&gt; C
saucer  1 : A -&gt; B
saucer  2 : A -&gt; C
saucer  1 : B -&gt; C</pre></blockquote>
			</exercise>
    </section>
  </section>
</xtdl>
